#include <Wire.h>
#include <Zumo32U4.h>
#include <PololuOLED.h>

Zumo32U4Buzzer buzzer;
Zumo32U4LineSensors lineSensors;
Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4OLED display;
Zumo32U4ProximitySensors proxSensors;

#define NUM_SENSORS 5
uint16_t lineSensorValues[NUM_SENSORS];

int speed = 170;
uint16_t SensorMax[5] = {0, 0, 0, 0, 0}; //Theese two array are for our threshold to have a min and max when we calibrate.
uint16_t SensorMin[5] = {2000, 2000, 2000, 2000, 2000};
int SensorThreshold[5]; //This will be the final values after calibrating the threshold.
bool ledOn = true;
int buttton = 0; //For our switch case.

void setup() {
  Serial.begin(9600);
  lineSensors.initFiveSensors();
  Kali();
  Bip(); //To notify when the calibration is done.
}


void Kali(){
  /*We use this function to calibrate the threshold, so we wont have to change it manually. 
  We start by turning on the LED, then the motors to turn on the spot.
  Then we count for 500 iterations to be sure we have a good threshold.
  Then we go through all our 5 sensors, if the current value is higher than our max, we change it,
  and if its less than our minimum we change it. Lastly we take the average of max and min,
  give a LED and sound indication that we are done and turn the motors off.
  */
  delay(2000);
  ledYellow(ledOn);
  TurnOnSpot();
  
  for (int i = 0; i < 500; i++ ){
    readLineSensors();
    for (int j = 0; j < 5; j++){
        if (lineSensorValues[j] > SensorMax[j]){
            SensorMax[j] = lineSensorValues[j];
        }

        if (lineSensorValues[j] < SensorMin[j]){
            SensorMin[j] = lineSensorValues[j];
        }
    } 
  }
  for (int i=0; i<5; i++){
  SensorThreshold[i] = (SensorMax[i]+SensorMin[i])/2;
  ledYellow(!ledOn);
  }
  //Serial.print(SensorThreshold[5]);
  Bip();
  ledGreen(ledOn);
  stop();
  //delay(5000);
}

void Bip(){
  buzzer.playNote(NOTE_A(4),100,15);
}


bool lineDetected() {
  lineSensors.read(lineSensorValues); 
  //A boolian to easily check the two outer most senors. 

  if(lineSensorValues[0] > SensorThreshold[0] || lineSensorValues[4] > SensorThreshold[4]){
    return true;
  }
  else 
    return false;
}



void start() {
  //The first function to just find the line.
  while (lineDetected() == false) {
    motors.setSpeeds(speed,speed);

  }
  stop();

}

void stop() {
  motors.setSpeeds(0,0);

}

void TurnOnSpot(){
  motors.setSpeeds(speed, -speed);
}

void readLineSensors(){
  lineSensors.read(lineSensorValues, QTR_EMITTERS_ON);
  delay(20);
}

void PrintSensorThreshold(){
  char buffer[80];
  sprintf(buffer, "%4d %4d %4d %4d %4d \n", 
    SensorThreshold[0], 
    SensorThreshold[1],
    SensorThreshold[2],
    SensorThreshold[3],
    SensorThreshold[4]
    );
    Serial.print(buffer);
    return SensorThreshold;
}

void hardTurnRight(){
  motors.setSpeeds(speed,-speed);
  delay(800);
  stop();
}

void softTurnRight(){
  motors.setSpeeds(speed,0.01*speed);

}

void TurnLeft() {
  motors.setSpeeds(0.1*speed,speed);

}

void maseSolver(){
  /*This was the maser solver, by constantly following the left line.
  We wanted to make sure our crossed the line as little as possible.
  The first two if statements are to just follow the line with the left most sensor.
  Constanly turning soft out of the line (to keep going forward), and hard into the line (to better make a left corner turn).
  The next if statement was when comming straight into a corcer, we wanted the rightmost sensor to react and make turn on the spot.
  The last is when both sensors see a corner at the same time, to turn on spot again.
  */
  if(lineSensorValues[0] > SensorThreshold[0]){
    softTurnRight();
  }
  if(lineSensorValues[0] < SensorThreshold[0]){
    TurnLeft();
  }

  if(lineSensorValues[4] > SensorThreshold[4]){
    motors.setSpeeds(speed,-speed);
    delay(450);
  }
 if(lineSensorValues[4] > SensorThreshold[4] && lineSensorValues[0] > SensorThreshold[0]){
    motors.setSpeeds(speed,-speed);
    delay(450);
    /*display.clear();
    display.gotoXY(0, 0);
    display.print("1");
    */
    //The display was just to see if the function was run, whitout being connected to serial.
  }
}



void loop() {
  /* We used a swich case to connect a button, so we didnt have to rush in position after calibration 
  and only starting the mase solver after first seeing the first line.
  */
  readLineSensors();
  switch (buttton){
    case 0:
      if (buttonA.isPressed()){
        buttton = 1;
        buttonA.waitForRelease();
      }
      break;
    case 1:
      start(); 
      hardTurnRight();
      buttton = 2;
      break;
    case 2:
       maseSolver();
      break;
  }


}
